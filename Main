import java.util.Scanner;

public class SudokuGame {
    private static final int SIZE = 9;
    private static int[][] board = new int[SIZE][SIZE];

    public static void main(String[] args) {
        initializeBoard();
        printBoard();

        while (!isSudokuSolved()) {
            int row, col, num;
            Scanner scanner = new Scanner(System.in);

            System.out.println("Enter row, column, and number (1-9) separated by spaces (e.g., '3 4 5'): ");
            row = scanner.nextInt() - 1;
            col = scanner.nextInt() - 1;
            num = scanner.nextInt();

            if (isValidMove(row, col, num)) {
                board[row][col] = num;
                printBoard();
            } else {
                System.out.println("Invalid move! Try again.");
            }
        }

        System.out.println("Congratulations! Sudoku solved!");
    }

    private static void initializeBoard() {
        // Initialize the Sudoku board
        int[][] initialBoard = {
            {5, 3, 0, 0, 7, 0, 0, 0, 0},
            {6, 0, 0, 1, 9, 5, 0, 0, 0},
            {0, 9, 8, 0, 0, 0, 0, 6, 0},
            {8, 0, 0, 0, 6, 0, 0, 0, 3},
            {4, 0, 0, 8, 0, 3, 0, 0, 1},
            {7, 0, 0, 0, 2, 0, 0, 0, 6},
            {0, 6, 0, 0, 0, 0, 2, 8, 0},
            {0, 0, 0, 4, 1, 9, 0, 0, 5},
            {0, 0, 0, 0, 8, 0, 0, 7, 9}
        };

        // Copy initial board to the game board
        for (int i = 0; i < SIZE; i++) {
            System.arraycopy(initialBoard[i], 0, board[i], 0, SIZE);
        }
    }

    private static void printBoard() {
        System.out.println("-------------");
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (j % 3 == 0) {
                    System.out.print("| ");
                }
                System.out.print(board[i][j] + " ");
            }
            System.out.println("|");
            if ((i + 1) % 3 == 0) {
                System.out.println("-------------");
            }
        }
    }

    private static boolean isValidMove(int row, int col, int num) {
        // Check if the number is already present in the row
        for (int i = 0; i < SIZE; i++) {
            if (board[row][i] == num) {
                return false;
            }
        }

        // Check if the number is already present in the column
        for (int i = 0; i < SIZE; i++) {
            if (board[i][col] == num) {
                return false;
            }
        }

        // Check if the number is already present in the 3x3 grid
        int startRow = row - row % 3;
        int startCol = col - col % 3;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i + startRow][j + startCol] == num) {
                    return false;
                }
            }
        }

        return true;
    }

    private static boolean isSudokuSolved() {
        // Check if the Sudoku board is completely filled
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == 0) {
                    return false;
                }
            }
        }
        return true;
    }
}
